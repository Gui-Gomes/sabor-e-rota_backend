package net.guilhermegomes.backend.domain.restaurant;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import net.guilhermegomes.backend.domain.address.Address;
import java.util.Objects;

/**
 * Represents a restaurant entity in the system.
 * This class is mapped to the "restaurants" table in the database.
 * It includes fields for the restaurant's name, rating, and associated address.
 */
@Entity
@Table(name = "restaurants")
public class Restaurant {

    /**
     * Unique identifier for the restaurant.
     * This field is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_restaurant")
    private long id;

    /**
     * The address of the restaurant.
     * This field establishes a many-to-one relationship with the Address entity.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_address", nullable = false)
    private Address address;

    /**
     * The name of the restaurant.
     * This field cannot be empty or null.
     */
    @NotEmpty(message = "Name cannot be empty")
    @Column(name = "name")
    private String name;

    /**
     * The rating of the restaurant.
     * This field must be between 0 and 5.
     */
    @Min(value = 0, message = "Rating cannot be less than 0")
    @Max(value = 5, message = "Rating cannot be greater than 5")
    @Column(name = "rating")
    private double rating;

    /**
     * Default constructor required by JPA.
     */
    public Restaurant() {}

    /**
     * Parameterized constructor to create a Restaurant instance with all fields.
     *
     * @param address The address of the restaurant.
     * @param name    The name of the restaurant.
     * @param rating  The rating of the restaurant.
     */
    public Restaurant(Address address, String name, double rating) {
        setAddress(address);
        setName(name);
        setRating(rating);
    }

    /**
     * Returns the unique identifier of the restaurant.
     *
     * @return The restaurant ID.
     */
    public long getId() {
        return id;
    }

    /**
     * Returns the address of the restaurant.
     *
     * @return The address.
     */
    public Address getAddress() {
        return address;
    }

    /**
     * Sets the address of the restaurant.
     * If the provided value is null, an exception is thrown.
     *
     * @param address The address to set.
     * @throws IllegalArgumentException If the address is null.
     */
    public void setAddress(final Address address) {
        if (address == null) {
            throw new IllegalArgumentException("Address cannot be null");
        }
        this.address = address;
    }

    /**
     * Returns the name of the restaurant.
     *
     * @return The name.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the restaurant.
     * If the provided value is null or empty, an exception is thrown.
     *
     * @param name The name to set.
     * @throws IllegalArgumentException If the name is null or empty.
     */
    public void setName(final String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Name cannot be null or empty");
        }
        this.name = name;
    }

    /**
     * Returns the rating of the restaurant.
     *
     * @return The rating.
     */
    public double getRating() {
        return rating;
    }

    /**
     * Sets the rating of the restaurant.
     * If the rating is out of bounds, it is adjusted to fit within the range [0,5].
     *
     * @param rating The rating to set.
     */
    public void setRating(final double rating) {
        if (rating < 0) {
            this.rating = 0;
        } else if (rating > 5) {
            this.rating = 5;
        } else {
            this.rating = rating;
        }
    }

    /**
     * Compares this restaurant to another object for equality.
     * Two restaurants are considered equal if they have the same ID.
     *
     * @param o The object to compare.
     * @return True if the objects are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Restaurant that = (Restaurant) o;
        return id == that.id;
    }

    /**
     * Returns a hash code value for the restaurant.
     * The hash code is based on the restaurant ID.
     *
     * @return The hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Returns a string representation of the restaurant.
     *
     * @return A string containing all fields of the restaurant.
     */
    @Override
    public String toString() {
        return "Restaurant{" +
                "id=" + id +
                ", address=" + (address != null ? address.getId() : "null") +
                ", name='" + name + '\'' +
                ", rating=" + rating +
                '}';
    }
}