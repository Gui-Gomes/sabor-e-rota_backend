package net.guilhermegomes.backend.domain.address;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import java.util.Objects;

/**
 * Represents an address entity in the system.
 * This class is mapped to the "addresses" table in the database.
 * It includes fields for street, neighborhood, city, state, postal code, country, and geographic coordinates (latitude and longitude).
 */
@Entity
@Table(name = "addresses")
public class Address {

    /**
     * Unique identifier for the address.
     * This field is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id_address")
    private long id;

    /**
     * The street name and number of the address.
     * This field cannot be empty.
     */
    @NotNull(message = "Street cannot be null")
    @Column(name = "street")
    private String street;

    /**
     * The neighborhood of the address.
     * This field cannot be empty.
     */
    @NotNull(message = "Neighborhood cannot be null")
    @Column(name = "neighborhood")
    private String neighborhood;

    /**
     * The city of the address.
     * This field cannot be empty.
     */
    @NotNull(message = "City cannot be null")
    @Column(name = "city")
    private String city;

    /**
     * The state or region of the address.
     * This field cannot be empty and must be exactly 2 characters long.
     */
    @NotNull(message = "State cannot be null")
    @Column(name = "state")
    private String state;

    /**
     * The postal code of the address.
     * This field cannot be empty and must be between 5 and 10 characters long.
     */
    @NotNull(message = "Postal code cannot be null")
    @Column(name = "postal_code")
    private String postalCode;

    /**
     * The country of the address.
     * This field cannot be empty.
     */
    @NotNull(message = "Country cannot be null")
    @Column(name = "country")
    private String country;

    /**
     * The latitude coordinate of the address.
     * This field cannot be null and must be between -90 and 90 degrees.
     */
    @NotNull(message = "Latitude cannot be null")
    @Column(name = "latitude")
    private double latitude;

    /**
     * The longitude coordinate of the address.
     * This field cannot be null and must be between -180 and 180 degrees.
     */
    @NotNull(message = "Longitude cannot be null")
    @Column(name = "longitude")
    private double longitude;

    /**
     * Default constructor required by JPA.
     */
    public Address() {}

    /**
     * Parameterized constructor to create an Address instance with all fields.
     *
     * @param street       The street name and number.
     * @param neighborhood The neighborhood.
     * @param city         The city.
     * @param state        The state or region.
     * @param postalCode   The postal code.
     * @param country      The country.
     * @param latitude     The latitude coordinate.
     * @param longitude    The longitude coordinate.
     */
    public Address(String street, String neighborhood, String city, String state, String postalCode, String country, double latitude, double longitude) {
        setStreet(street);
        setNeighborhood(neighborhood);
        setCity(city);
        setState(state);
        setPostalCode(postalCode);
        setCountry(country);
        setLatitude(latitude);
        setLongitude(longitude);
    }

    // Getters and Setters

    /**
     * Returns the unique identifier of the address.
     *
     * @return The address ID.
     */
    public long getId() {
        return id;
    }

    /**
     * Returns the street name and number of the address.
     *
     * @return The street.
     */
    public String getStreet() {
        return street;
    }

    /**
     * Sets the street name and number of the address.
     * If the provided value is null, it will be set to an empty string.
     *
     * @param street The street to set.
     */
    public void setStreet(String street) {
        this.street = (street == null) ? "" : street;
    }

    /**
     * Returns the neighborhood of the address.
     *
     * @return The neighborhood.
     */
    public String getNeighborhood() {
        return neighborhood;
    }

    /**
     * Sets the neighborhood of the address.
     * If the provided value is null, it will be set to an empty string.
     *
     * @param neighborhood The neighborhood to set.
     */
    public void setNeighborhood(String neighborhood) {
        this.neighborhood = (neighborhood == null) ? "" : neighborhood;
    }

    /**
     * Returns the city of the address.
     *
     * @return The city.
     */
    public String getCity() {
        return city;
    }

    /**
     * Sets the city of the address.
     * If the provided value is null, it will be set to an empty string.
     *
     * @param city The city to set.
     */
    public void setCity(String city) {
        this.city = (city == null) ? "" : city;
    }

    /**
     * Returns the state or region of the address.
     *
     * @return The state.
     */
    public String getState() {
        return state;
    }

    /**
     * Sets the state or region of the address.
     * If the provided value is null, it will be set to an empty string.
     *
     * @param state The state to set.
     */
    public void setState(String state) {
        this.state = (state == null) ? "" : state;
    }

    /**
     * Returns the postal code of the address.
     *
     * @return The postal code.
     */
    public String getPostalCode() {
        return postalCode;
    }

    /**
     * Sets the postal code of the address.
     * If the provided value is null, it will be set to an empty string.
     *
     * @param postalCode The postal code to set.
     */
    public void setPostalCode(String postalCode) {
        this.postalCode = (postalCode == null) ? "" : postalCode;
    }

    /**
     * Returns the country of the address.
     *
     * @return The country.
     */
    public String getCountry() {
        return country;
    }

    /**
     * Sets the country of the address.
     * If the provided value is null, it will be set to an empty string.
     *
     * @param country The country to set.
     */
    public void setCountry(String country) {
        this.country = (country == null) ? "" : country;
    }

    /**
     * Returns the latitude coordinate of the address.
     *
     * @return The latitude.
     */
    public double getLatitude() {
        return latitude;
    }

    /**
     * Sets the latitude coordinate of the address.
     * The value must be between -90 and 90 degrees.
     *
     * @param latitude The latitude to set.
     * @throws IllegalArgumentException If the latitude is out of range.
     */
    public void setLatitude(double latitude) {
        if (latitude < -90 || latitude > 90) {
            throw new IllegalArgumentException("Latitude must be between -90 and 90 degrees");
        }
        this.latitude = latitude;
    }

    /**
     * Returns the longitude coordinate of the address.
     *
     * @return The longitude.
     */
    public double getLongitude() {
        return longitude;
    }

    /**
     * Sets the longitude coordinate of the address.
     * The value must be between -180 and 180 degrees.
     *
     * @param longitude The longitude to set.
     * @throws IllegalArgumentException If the longitude is out of range.
     */
    public void setLongitude(double longitude) {
        if (longitude < -180 || longitude > 180) {
            throw new IllegalArgumentException("Longitude must be between -180 and 180 degrees");
        }
        this.longitude = longitude;
    }

    // Equals and HashCode

    /**
     * Compares this address to another object for equality.
     * Two addresses are considered equal if they have the same ID.
     *
     * @param o The object to compare.
     * @return True if the objects are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Address address = (Address) o;
        return id == address.id;
    }

    /**
     * Returns a hash code value for the address.
     * The hash code is based on the address ID.
     *
     * @return The hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    // ToString

    /**
     * Returns a string representation of the address.
     *
     * @return A string containing all fields of the address.
     */
    @Override
    public String toString() {
        return "Address{" +
                "id=" + id +
                ", street='" + street + '\'' +
                ", neighborhood='" + neighborhood + '\'' +
                ", city='" + city + '\'' +
                ", state='" + state + '\'' +
                ", postalCode='" + postalCode + '\'' +
                ", country='" + country + '\'' +
                ", latitude=" + latitude +
                ", longitude=" + longitude +
                '}';
    }
}