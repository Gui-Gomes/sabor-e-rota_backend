package net.guilhermegomes.backend.domain.userQuery;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import net.guilhermegomes.backend.domain.address.Address;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * Represents a user query entity in the system.
 * This class is mapped to the "queries" table in the database.
 * It includes fields for the query's creation date and associated address.
 */
@Entity
@Table(name = "queries")
public class UserQuery {

    /**
     * Unique identifier for the query.
     * This field is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(name = "id_query")
    private long id;

    /**
     * The address related to the user query.
     * This field establishes a many-to-one relationship with the Address entity.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "id_address", nullable = false)
    @NotNull(message = "Address cannot be null")
    private Address address;

    /**
     * The creation date and time of the query.
     * This field cannot be null and is automatically set when a new query is created.
     */
    @Column(name = "creation_date", nullable = false, updatable = false)
    private LocalDateTime creationDate;

    /**
     * Default constructor required by JPA.
     */
    public UserQuery() {
        this.creationDate = LocalDateTime.now();
    }

    /**
     * Parameterized constructor to create a UserQuery instance with an address.
     *
     * @param address The address related to the query.
     */
    public UserQuery(Address address) {
        setAddress(address);
        this.creationDate = LocalDateTime.now();
    }

    /**
     * Returns the unique identifier of the query.
     *
     * @return The query ID.
     */
    public long getId() {
        return id;
    }

    /**
     * Returns the address related to the query.
     *
     * @return The address.
     */
    public Address getAddress() {
        return address;
    }

    /**
     * Sets the address related to the query.
     * If the provided value is null, an exception is thrown.
     *
     * @param address The address to set.
     * @throws IllegalArgumentException If the address is null.
     */
    public void setAddress(final Address address) {
        if (address == null) {
            throw new IllegalArgumentException("Address cannot be null");
        }
        this.address = address;
    }

    /**
     * Returns the creation date of the query.
     *
     * @return The creation date.
     */
    public LocalDateTime getCreationDate() {
        return creationDate;
    }

    /**
     * Compares this user query to another object for equality.
     * Two queries are considered equal if they have the same ID.
     *
     * @param o The object to compare.
     * @return True if the objects are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        UserQuery userQuery = (UserQuery) o;
        return id == userQuery.id;
    }

    /**
     * Returns a hash code value for the query.
     * The hash code is based on the query ID.
     *
     * @return The hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Returns a string representation of the user query.
     *
     * @return A string containing all fields of the query.
     */
    @Override
    public String toString() {
        return "UserQuery{" +
                "id=" + id +
                ", address=" + (address != null ? address.getId() : "null") +
                ", creationDate=" + creationDate +
                '}';
    }
}
